# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-11-22 20:07:50
"""
import arcpy

def Model():  # Model

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"W:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"W:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
        cloud_point_lasd = "cloud_point.lasd"
        las_files = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\las_files"
        areas = "areas"
        dsm2 = arcpy.Raster("W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\dsm2")

        # Process: Extract LAS (Extract LAS) (3d)
        cloudpo_p10_lasd = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\cloudpo_p10.lasd"
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            las_files_2_ = arcpy.ddd.ExtractLas(in_las_dataset=cloud_point_lasd, target_folder=las_files, extent="DEFAULT", boundary=areas, process_entire_files="PROCESS_EXTENT", name_suffix="", remove_vlr="MAINTAIN_VLR", rearrange_points="REARRANGE_POINTS", compute_stats="COMPUTE_STATS", out_las_dataset=cloudpo_p10_lasd, compression="SAME_AS_INPUT")[0]

        # Process: LAS Point Statistics As Raster (LAS Point Statistics As Raster) (management)
        cloudp_p10 = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\lidar_solarrad.gdb\\cloudp_p10"
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            arcpy.management.LasPointStatsAsRaster(in_las_dataset=cloudpo_p10_lasd, out_raster=cloudp_p10, method="PREDOMINANT_CLASS", sampling_type="CELLSIZE", sampling_value=10)
            cloudp_p10 = arcpy.Raster(cloudp_p10)

        # Process: Raster to Polygon (Raster to Polygon) (conversion)
        Buildings_Raw = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\Buildings_Raw"
        with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled", scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", 
                              workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            arcpy.conversion.RasterToPolygon(in_raster=cloudp_p10, out_polygon_features=Buildings_Raw, simplify="NO_SIMPLIFY", raster_field="Value", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Select Layer By Attribute (Select Layer By Attribute) (management)
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            Buildings_Raw_Layer, Count = arcpy.management.SelectLayerByAttribute(in_layer_or_view=Buildings_Raw, selection_type="NEW_SELECTION", where_clause="Shape_Area > 100", invert_where_clause="")

        # Process: Eliminate Polygon Part (Eliminate Polygon Part) (management)
        Buildings_Clean = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\Buildings_Clean"
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            arcpy.management.EliminatePolygonPart(in_features=Buildings_Raw, out_feature_class=Buildings_Clean, condition="AREA", part_area="500 SquareFeet", part_area_percent=0, part_option="CONTAINED_ONLY")

        # Process: Regularize Building Footprint (Regularize Building Footprint) (3d)
        Buildings_Footprints = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\Buildings_Footprints"
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            arcpy.ddd.RegularizeBuildingFootprint(in_features=Buildings_Clean, out_feature_class=Buildings_Footprints, method="RIGHT_ANGLES", tolerance=1, densification=1, precision=0.15, diagonal_penalty=1.5, min_radius=0.1, max_radius=1000000)

        # Process: Extract by Mask (Extract by Mask) (sa)
        Extract_dsm2 = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\Extract_dsm2"
        Extract_by_Mask = Extract_dsm2
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            Extract_dsm2 = arcpy.sa.ExtractByMask(in_raster=dsm2, in_mask_data=Buildings_Footprints)
            Extract_dsm2.save(Extract_by_Mask)


        # Process: Area Solar Radiation (Area Solar Radiation) (sa)
        AreaSol_p10 = "W:\\GIS\\LIDAR\\Project\\LIDAR_SolarRad\\LIDAR_SolarRad.gdb\\AreaSol_p10"
        Area_Solar_Radiation = AreaSol_p10
        Output_direct_radiation_raster = ""
        Output_diffuse_radiation_raster = ""
        Output_direct_duration_raster = ""
        with arcpy.EnvManager(scratchWorkspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb", workspace=r"F:\GIS\LIDAR\Project\LIDAR_SolarRad\LIDAR_SolarRad.gdb"):
            AreaSol_p10 = arcpy.sa.AreaSolarRadiation(in_surface_raster=Extract_dsm2, latitude=45.48225016407195, sky_size=200, time_configuration="WholeYear 2021", day_interval=14, hour_interval=2, each_interval="NOINTERVAL", z_factor=1, slope_aspect_input_type="FROM_DEM", calculation_directions=32, zenith_divisions=8, azimuth_divisions=8, diffuse_model_type="UNIFORM_SKY", diffuse_proportion=0.3, transmittivity=0.5, out_direct_radiation_raster=Output_direct_radiation_raster, out_diffuse_radiation_raster=Output_diffuse_radiation_raster, out_direct_duration_raster=Output_direct_duration_raster)
            AreaSol_p10.save(Area_Solar_Radiation)


if __name__ == '__main__':
    Model()
